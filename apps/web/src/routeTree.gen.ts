/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignOutRouteImport } from './routes/auth/sign-out'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as OrganizationsCreateIndexRouteImport } from './routes/organizations/create/index'
import { Route as DashboardAdminUsersRouteRouteImport } from './routes/dashboard/admin/users/route'
import { Route as DashboardAdminSkillsRouteRouteImport } from './routes/dashboard/admin/skills/route'
import { Route as DashboardAdminOrganizationsRouteRouteImport } from './routes/dashboard/admin/organizations/route'
import { Route as DashboardAdminUsersIndexRouteImport } from './routes/dashboard/admin/users/index'
import { Route as DashboardAdminSpecialtiesIndexRouteImport } from './routes/dashboard/admin/specialties/index'
import { Route as DashboardAdminSkillsIndexRouteImport } from './routes/dashboard/admin/skills/index'
import { Route as DashboardAdminOrganizationsIndexRouteImport } from './routes/dashboard/admin/organizations/index'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignOutRoute = AuthSignOutRouteImport.update({
  id: '/auth/sign-out',
  path: '/auth/sign-out',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationsCreateIndexRoute =
  OrganizationsCreateIndexRouteImport.update({
    id: '/organizations/create/',
    path: '/organizations/create/',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardAdminUsersRouteRoute =
  DashboardAdminUsersRouteRouteImport.update({
    id: '/admin/users',
    path: '/admin/users',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardAdminSkillsRouteRoute =
  DashboardAdminSkillsRouteRouteImport.update({
    id: '/admin/skills',
    path: '/admin/skills',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardAdminOrganizationsRouteRoute =
  DashboardAdminOrganizationsRouteRouteImport.update({
    id: '/admin/organizations',
    path: '/admin/organizations',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardAdminUsersIndexRoute =
  DashboardAdminUsersIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardAdminUsersRouteRoute,
  } as any)
const DashboardAdminSpecialtiesIndexRoute =
  DashboardAdminSpecialtiesIndexRouteImport.update({
    id: '/admin/specialties/',
    path: '/admin/specialties/',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardAdminSkillsIndexRoute =
  DashboardAdminSkillsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardAdminSkillsRouteRoute,
  } as any)
const DashboardAdminOrganizationsIndexRoute =
  DashboardAdminOrganizationsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardAdminOrganizationsRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-out': typeof AuthSignOutRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/admin/organizations': typeof DashboardAdminOrganizationsRouteRouteWithChildren
  '/dashboard/admin/skills': typeof DashboardAdminSkillsRouteRouteWithChildren
  '/dashboard/admin/users': typeof DashboardAdminUsersRouteRouteWithChildren
  '/organizations/create': typeof OrganizationsCreateIndexRoute
  '/dashboard/admin/organizations/': typeof DashboardAdminOrganizationsIndexRoute
  '/dashboard/admin/skills/': typeof DashboardAdminSkillsIndexRoute
  '/dashboard/admin/specialties': typeof DashboardAdminSpecialtiesIndexRoute
  '/dashboard/admin/users/': typeof DashboardAdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-out': typeof AuthSignOutRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/dashboard': typeof DashboardIndexRoute
  '/organizations/create': typeof OrganizationsCreateIndexRoute
  '/dashboard/admin/organizations': typeof DashboardAdminOrganizationsIndexRoute
  '/dashboard/admin/skills': typeof DashboardAdminSkillsIndexRoute
  '/dashboard/admin/specialties': typeof DashboardAdminSpecialtiesIndexRoute
  '/dashboard/admin/users': typeof DashboardAdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-out': typeof AuthSignOutRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/admin/organizations': typeof DashboardAdminOrganizationsRouteRouteWithChildren
  '/dashboard/admin/skills': typeof DashboardAdminSkillsRouteRouteWithChildren
  '/dashboard/admin/users': typeof DashboardAdminUsersRouteRouteWithChildren
  '/organizations/create/': typeof OrganizationsCreateIndexRoute
  '/dashboard/admin/organizations/': typeof DashboardAdminOrganizationsIndexRoute
  '/dashboard/admin/skills/': typeof DashboardAdminSkillsIndexRoute
  '/dashboard/admin/specialties/': typeof DashboardAdminSpecialtiesIndexRoute
  '/dashboard/admin/users/': typeof DashboardAdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/auth/sign-in'
    | '/auth/sign-out'
    | '/auth/sign-up'
    | '/dashboard/'
    | '/dashboard/admin/organizations'
    | '/dashboard/admin/skills'
    | '/dashboard/admin/users'
    | '/organizations/create'
    | '/dashboard/admin/organizations/'
    | '/dashboard/admin/skills/'
    | '/dashboard/admin/specialties'
    | '/dashboard/admin/users/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/sign-in'
    | '/auth/sign-out'
    | '/auth/sign-up'
    | '/dashboard'
    | '/organizations/create'
    | '/dashboard/admin/organizations'
    | '/dashboard/admin/skills'
    | '/dashboard/admin/specialties'
    | '/dashboard/admin/users'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/auth/sign-in'
    | '/auth/sign-out'
    | '/auth/sign-up'
    | '/dashboard/'
    | '/dashboard/admin/organizations'
    | '/dashboard/admin/skills'
    | '/dashboard/admin/users'
    | '/organizations/create/'
    | '/dashboard/admin/organizations/'
    | '/dashboard/admin/skills/'
    | '/dashboard/admin/specialties/'
    | '/dashboard/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignOutRoute: typeof AuthSignOutRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  OrganizationsCreateIndexRoute: typeof OrganizationsCreateIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-out': {
      id: '/auth/sign-out'
      path: '/auth/sign-out'
      fullPath: '/auth/sign-out'
      preLoaderRoute: typeof AuthSignOutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizations/create/': {
      id: '/organizations/create/'
      path: '/organizations/create'
      fullPath: '/organizations/create'
      preLoaderRoute: typeof OrganizationsCreateIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/admin/users': {
      id: '/dashboard/admin/users'
      path: '/admin/users'
      fullPath: '/dashboard/admin/users'
      preLoaderRoute: typeof DashboardAdminUsersRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/admin/skills': {
      id: '/dashboard/admin/skills'
      path: '/admin/skills'
      fullPath: '/dashboard/admin/skills'
      preLoaderRoute: typeof DashboardAdminSkillsRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/admin/organizations': {
      id: '/dashboard/admin/organizations'
      path: '/admin/organizations'
      fullPath: '/dashboard/admin/organizations'
      preLoaderRoute: typeof DashboardAdminOrganizationsRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/admin/users/': {
      id: '/dashboard/admin/users/'
      path: '/'
      fullPath: '/dashboard/admin/users/'
      preLoaderRoute: typeof DashboardAdminUsersIndexRouteImport
      parentRoute: typeof DashboardAdminUsersRouteRoute
    }
    '/dashboard/admin/specialties/': {
      id: '/dashboard/admin/specialties/'
      path: '/admin/specialties'
      fullPath: '/dashboard/admin/specialties'
      preLoaderRoute: typeof DashboardAdminSpecialtiesIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/admin/skills/': {
      id: '/dashboard/admin/skills/'
      path: '/'
      fullPath: '/dashboard/admin/skills/'
      preLoaderRoute: typeof DashboardAdminSkillsIndexRouteImport
      parentRoute: typeof DashboardAdminSkillsRouteRoute
    }
    '/dashboard/admin/organizations/': {
      id: '/dashboard/admin/organizations/'
      path: '/'
      fullPath: '/dashboard/admin/organizations/'
      preLoaderRoute: typeof DashboardAdminOrganizationsIndexRouteImport
      parentRoute: typeof DashboardAdminOrganizationsRouteRoute
    }
  }
}

interface DashboardAdminOrganizationsRouteRouteChildren {
  DashboardAdminOrganizationsIndexRoute: typeof DashboardAdminOrganizationsIndexRoute
}

const DashboardAdminOrganizationsRouteRouteChildren: DashboardAdminOrganizationsRouteRouteChildren =
  {
    DashboardAdminOrganizationsIndexRoute:
      DashboardAdminOrganizationsIndexRoute,
  }

const DashboardAdminOrganizationsRouteRouteWithChildren =
  DashboardAdminOrganizationsRouteRoute._addFileChildren(
    DashboardAdminOrganizationsRouteRouteChildren,
  )

interface DashboardAdminSkillsRouteRouteChildren {
  DashboardAdminSkillsIndexRoute: typeof DashboardAdminSkillsIndexRoute
}

const DashboardAdminSkillsRouteRouteChildren: DashboardAdminSkillsRouteRouteChildren =
  {
    DashboardAdminSkillsIndexRoute: DashboardAdminSkillsIndexRoute,
  }

const DashboardAdminSkillsRouteRouteWithChildren =
  DashboardAdminSkillsRouteRoute._addFileChildren(
    DashboardAdminSkillsRouteRouteChildren,
  )

interface DashboardAdminUsersRouteRouteChildren {
  DashboardAdminUsersIndexRoute: typeof DashboardAdminUsersIndexRoute
}

const DashboardAdminUsersRouteRouteChildren: DashboardAdminUsersRouteRouteChildren =
  {
    DashboardAdminUsersIndexRoute: DashboardAdminUsersIndexRoute,
  }

const DashboardAdminUsersRouteRouteWithChildren =
  DashboardAdminUsersRouteRoute._addFileChildren(
    DashboardAdminUsersRouteRouteChildren,
  )

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardAdminOrganizationsRouteRoute: typeof DashboardAdminOrganizationsRouteRouteWithChildren
  DashboardAdminSkillsRouteRoute: typeof DashboardAdminSkillsRouteRouteWithChildren
  DashboardAdminUsersRouteRoute: typeof DashboardAdminUsersRouteRouteWithChildren
  DashboardAdminSpecialtiesIndexRoute: typeof DashboardAdminSpecialtiesIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardAdminOrganizationsRouteRoute:
    DashboardAdminOrganizationsRouteRouteWithChildren,
  DashboardAdminSkillsRouteRoute: DashboardAdminSkillsRouteRouteWithChildren,
  DashboardAdminUsersRouteRoute: DashboardAdminUsersRouteRouteWithChildren,
  DashboardAdminSpecialtiesIndexRoute: DashboardAdminSpecialtiesIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignOutRoute: AuthSignOutRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  OrganizationsCreateIndexRoute: OrganizationsCreateIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
