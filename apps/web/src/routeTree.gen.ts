/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignOutRouteImport } from './routes/auth/sign-out'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as DashboardUsersRouteRouteImport } from './routes/dashboard/users/route'
import { Route as DashboardSkillsRouteRouteImport } from './routes/dashboard/skills/route'
import { Route as DashboardOrganizationsRouteRouteImport } from './routes/dashboard/organizations/route'
import { Route as DashboardUsersIndexRouteImport } from './routes/dashboard/users/index'
import { Route as DashboardSpecialtiesIndexRouteImport } from './routes/dashboard/specialties/index'
import { Route as DashboardSkillsIndexRouteImport } from './routes/dashboard/skills/index'
import { Route as DashboardOrganizationsIndexRouteImport } from './routes/dashboard/organizations/index'
import { Route as DashboardOrganizationsOrganizationIdRouteRouteImport } from './routes/dashboard/organizations/$organizationId/route'
import { Route as DashboardOrganizationsOrganizationIdIndexRouteImport } from './routes/dashboard/organizations/$organizationId/index'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignOutRoute = AuthSignOutRouteImport.update({
  id: '/auth/sign-out',
  path: '/auth/sign-out',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardUsersRouteRoute = DashboardUsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSkillsRouteRoute = DashboardSkillsRouteRouteImport.update({
  id: '/skills',
  path: '/skills',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardOrganizationsRouteRoute =
  DashboardOrganizationsRouteRouteImport.update({
    id: '/organizations',
    path: '/organizations',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardUsersIndexRoute = DashboardUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardUsersRouteRoute,
} as any)
const DashboardSpecialtiesIndexRoute =
  DashboardSpecialtiesIndexRouteImport.update({
    id: '/specialties/',
    path: '/specialties/',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardSkillsIndexRoute = DashboardSkillsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardSkillsRouteRoute,
} as any)
const DashboardOrganizationsIndexRoute =
  DashboardOrganizationsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardOrganizationsRouteRoute,
  } as any)
const DashboardOrganizationsOrganizationIdRouteRoute =
  DashboardOrganizationsOrganizationIdRouteRouteImport.update({
    id: '/$organizationId',
    path: '/$organizationId',
    getParentRoute: () => DashboardOrganizationsRouteRoute,
  } as any)
const DashboardOrganizationsOrganizationIdIndexRoute =
  DashboardOrganizationsOrganizationIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardOrganizationsOrganizationIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/organizations': typeof DashboardOrganizationsRouteRouteWithChildren
  '/dashboard/skills': typeof DashboardSkillsRouteRouteWithChildren
  '/dashboard/users': typeof DashboardUsersRouteRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-out': typeof AuthSignOutRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/organizations/$organizationId': typeof DashboardOrganizationsOrganizationIdRouteRouteWithChildren
  '/dashboard/organizations/': typeof DashboardOrganizationsIndexRoute
  '/dashboard/skills/': typeof DashboardSkillsIndexRoute
  '/dashboard/specialties': typeof DashboardSpecialtiesIndexRoute
  '/dashboard/users/': typeof DashboardUsersIndexRoute
  '/dashboard/organizations/$organizationId/': typeof DashboardOrganizationsOrganizationIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-out': typeof AuthSignOutRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/organizations': typeof DashboardOrganizationsIndexRoute
  '/dashboard/skills': typeof DashboardSkillsIndexRoute
  '/dashboard/specialties': typeof DashboardSpecialtiesIndexRoute
  '/dashboard/users': typeof DashboardUsersIndexRoute
  '/dashboard/organizations/$organizationId': typeof DashboardOrganizationsOrganizationIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/organizations': typeof DashboardOrganizationsRouteRouteWithChildren
  '/dashboard/skills': typeof DashboardSkillsRouteRouteWithChildren
  '/dashboard/users': typeof DashboardUsersRouteRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-out': typeof AuthSignOutRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/organizations/$organizationId': typeof DashboardOrganizationsOrganizationIdRouteRouteWithChildren
  '/dashboard/organizations/': typeof DashboardOrganizationsIndexRoute
  '/dashboard/skills/': typeof DashboardSkillsIndexRoute
  '/dashboard/specialties/': typeof DashboardSpecialtiesIndexRoute
  '/dashboard/users/': typeof DashboardUsersIndexRoute
  '/dashboard/organizations/$organizationId/': typeof DashboardOrganizationsOrganizationIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/organizations'
    | '/dashboard/skills'
    | '/dashboard/users'
    | '/auth/sign-in'
    | '/auth/sign-out'
    | '/auth/sign-up'
    | '/dashboard/'
    | '/dashboard/organizations/$organizationId'
    | '/dashboard/organizations/'
    | '/dashboard/skills/'
    | '/dashboard/specialties'
    | '/dashboard/users/'
    | '/dashboard/organizations/$organizationId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/sign-in'
    | '/auth/sign-out'
    | '/auth/sign-up'
    | '/dashboard'
    | '/dashboard/organizations'
    | '/dashboard/skills'
    | '/dashboard/specialties'
    | '/dashboard/users'
    | '/dashboard/organizations/$organizationId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/organizations'
    | '/dashboard/skills'
    | '/dashboard/users'
    | '/auth/sign-in'
    | '/auth/sign-out'
    | '/auth/sign-up'
    | '/dashboard/'
    | '/dashboard/organizations/$organizationId'
    | '/dashboard/organizations/'
    | '/dashboard/skills/'
    | '/dashboard/specialties/'
    | '/dashboard/users/'
    | '/dashboard/organizations/$organizationId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignOutRoute: typeof AuthSignOutRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-out': {
      id: '/auth/sign-out'
      path: '/auth/sign-out'
      fullPath: '/auth/sign-out'
      preLoaderRoute: typeof AuthSignOutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/skills': {
      id: '/dashboard/skills'
      path: '/skills'
      fullPath: '/dashboard/skills'
      preLoaderRoute: typeof DashboardSkillsRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/organizations': {
      id: '/dashboard/organizations'
      path: '/organizations'
      fullPath: '/dashboard/organizations'
      preLoaderRoute: typeof DashboardOrganizationsRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/users/': {
      id: '/dashboard/users/'
      path: '/'
      fullPath: '/dashboard/users/'
      preLoaderRoute: typeof DashboardUsersIndexRouteImport
      parentRoute: typeof DashboardUsersRouteRoute
    }
    '/dashboard/specialties/': {
      id: '/dashboard/specialties/'
      path: '/specialties'
      fullPath: '/dashboard/specialties'
      preLoaderRoute: typeof DashboardSpecialtiesIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/skills/': {
      id: '/dashboard/skills/'
      path: '/'
      fullPath: '/dashboard/skills/'
      preLoaderRoute: typeof DashboardSkillsIndexRouteImport
      parentRoute: typeof DashboardSkillsRouteRoute
    }
    '/dashboard/organizations/': {
      id: '/dashboard/organizations/'
      path: '/'
      fullPath: '/dashboard/organizations/'
      preLoaderRoute: typeof DashboardOrganizationsIndexRouteImport
      parentRoute: typeof DashboardOrganizationsRouteRoute
    }
    '/dashboard/organizations/$organizationId': {
      id: '/dashboard/organizations/$organizationId'
      path: '/$organizationId'
      fullPath: '/dashboard/organizations/$organizationId'
      preLoaderRoute: typeof DashboardOrganizationsOrganizationIdRouteRouteImport
      parentRoute: typeof DashboardOrganizationsRouteRoute
    }
    '/dashboard/organizations/$organizationId/': {
      id: '/dashboard/organizations/$organizationId/'
      path: '/'
      fullPath: '/dashboard/organizations/$organizationId/'
      preLoaderRoute: typeof DashboardOrganizationsOrganizationIdIndexRouteImport
      parentRoute: typeof DashboardOrganizationsOrganizationIdRouteRoute
    }
  }
}

interface DashboardOrganizationsOrganizationIdRouteRouteChildren {
  DashboardOrganizationsOrganizationIdIndexRoute: typeof DashboardOrganizationsOrganizationIdIndexRoute
}

const DashboardOrganizationsOrganizationIdRouteRouteChildren: DashboardOrganizationsOrganizationIdRouteRouteChildren =
  {
    DashboardOrganizationsOrganizationIdIndexRoute:
      DashboardOrganizationsOrganizationIdIndexRoute,
  }

const DashboardOrganizationsOrganizationIdRouteRouteWithChildren =
  DashboardOrganizationsOrganizationIdRouteRoute._addFileChildren(
    DashboardOrganizationsOrganizationIdRouteRouteChildren,
  )

interface DashboardOrganizationsRouteRouteChildren {
  DashboardOrganizationsOrganizationIdRouteRoute: typeof DashboardOrganizationsOrganizationIdRouteRouteWithChildren
  DashboardOrganizationsIndexRoute: typeof DashboardOrganizationsIndexRoute
}

const DashboardOrganizationsRouteRouteChildren: DashboardOrganizationsRouteRouteChildren =
  {
    DashboardOrganizationsOrganizationIdRouteRoute:
      DashboardOrganizationsOrganizationIdRouteRouteWithChildren,
    DashboardOrganizationsIndexRoute: DashboardOrganizationsIndexRoute,
  }

const DashboardOrganizationsRouteRouteWithChildren =
  DashboardOrganizationsRouteRoute._addFileChildren(
    DashboardOrganizationsRouteRouteChildren,
  )

interface DashboardSkillsRouteRouteChildren {
  DashboardSkillsIndexRoute: typeof DashboardSkillsIndexRoute
}

const DashboardSkillsRouteRouteChildren: DashboardSkillsRouteRouteChildren = {
  DashboardSkillsIndexRoute: DashboardSkillsIndexRoute,
}

const DashboardSkillsRouteRouteWithChildren =
  DashboardSkillsRouteRoute._addFileChildren(DashboardSkillsRouteRouteChildren)

interface DashboardUsersRouteRouteChildren {
  DashboardUsersIndexRoute: typeof DashboardUsersIndexRoute
}

const DashboardUsersRouteRouteChildren: DashboardUsersRouteRouteChildren = {
  DashboardUsersIndexRoute: DashboardUsersIndexRoute,
}

const DashboardUsersRouteRouteWithChildren =
  DashboardUsersRouteRoute._addFileChildren(DashboardUsersRouteRouteChildren)

interface DashboardRouteRouteChildren {
  DashboardOrganizationsRouteRoute: typeof DashboardOrganizationsRouteRouteWithChildren
  DashboardSkillsRouteRoute: typeof DashboardSkillsRouteRouteWithChildren
  DashboardUsersRouteRoute: typeof DashboardUsersRouteRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardSpecialtiesIndexRoute: typeof DashboardSpecialtiesIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardOrganizationsRouteRoute:
    DashboardOrganizationsRouteRouteWithChildren,
  DashboardSkillsRouteRoute: DashboardSkillsRouteRouteWithChildren,
  DashboardUsersRouteRoute: DashboardUsersRouteRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardSpecialtiesIndexRoute: DashboardSpecialtiesIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignOutRoute: AuthSignOutRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
